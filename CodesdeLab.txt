
109. Convert Sorted List to Binary Search Tree
class Solution {
private:
    ListNode* current;

    int getLength(ListNode* head) {
        int len = 0;
        while (head) {
            ++len;
            head = head->next;
        }
        return len;
    }

    TreeNode* buildTree(int left, int right) {
        if (left > right) return nullptr;

        int mid = left + (right - left) / 2;

        TreeNode* leftChild = buildTree(left, mid - 1);

        TreeNode* root = new TreeNode(current->val);
        current = current->next;

        TreeNode* rightChild = buildTree(mid + 1, right);

        root->left = leftChild;
        root->right = rightChild;
        return root;
    }

public:
    TreeNode* sortedListToBST(ListNode* head) {
        int n = getLength(head);
        current = head;
        return buildTree(0, n - 1);
    }
};
 Balance a Binary Search Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    void inorder(TreeNode* root, vector<int>& values) {
        if (!root) return;
        inorder(root->left, values);
        values.push_back(root->val);
        inorder(root->right, values);
    }

    TreeNode* buildBalancedBST(const vector<int>& values, int left, int right) {
        if (left > right) return nullptr;
        int mid = left + (right - left) / 2;
        TreeNode* node = new TreeNode(values[mid]);
        node->left = buildBalancedBST(values, left, mid - 1);
        node->right = buildBalancedBST(values, mid + 1, right);
        return node;
    }

    TreeNode* balanceBST(TreeNode* root) {
        vector<int> values;
        inorder(root, values);
        return buildBalancedBST(values, 0, values.size() - 1);
    }
};
Insert into a Binary Search Tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (!root) return new TreeNode(val);

        if (val < root->val)
            root->left = insertIntoBST(root->left, val);
        else
            root->right = insertIntoBST(root->right, val);

        return root;
    }
};
